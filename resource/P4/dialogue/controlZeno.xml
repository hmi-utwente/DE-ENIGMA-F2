<behaviourtemplates>

	<is name="zeno">
		{	
			"busy" : false,
			"mirroring" : false,
			"request" : "",
			"requestNewRandomVariant" : true,
			"behaviour" : "",
			"prevRequest" : ""
		}
	</is>
	
	<javascript>
		<![CDATA[
			function roundTo(n, digits) {
			    var negative = false;
			    if (digits === undefined) {
			        digits = 0;
			    }
			        if( n < 0) {
			        negative = true;
			      n = n * -1;
			    }
			    var multiplicator = Math.pow(10, digits);
			    n = parseFloat((n * multiplicator).toFixed(11));
			    n = (Math.round(n) / multiplicator).toFixed(2);
			    if( negative ) {    
			        n = (n * -1).toFixed(2);
			    }
			    return +n;
			}
			
			var zenoBehaviourRequests = [];
			
			function addZenoBehaviourRequest(behaviour){
				zenoBehaviourRequests.push(behaviour);
				return zenoBehaviourRequests.length;
			}
			
			function isPendingZenoBehaviour(){
				return zenoBehaviourRequests.length > 0;
			}
			
			function getNextZenoBehaviourRequest(){
	            var nextRequest = zenoBehaviourRequests[0];
	            zenoBehaviourRequests.shift();
	            return nextRequest;
	        }
	        
			function createZB(action){
				if(typeof action === "undefined"){
					log("!!!doing an undefined action!!!");
				}
				
				//are we dealing with a combined audio/animation sequence, or just one of the two?
				if(action.hasOwnProperty("audio") && action.hasOwnProperty("audioDuration") && action.hasOwnProperty("animation") && action.hasOwnProperty("animationDuration")){
					var filename = "animationAudioBehaviour";
					var audio = action.audio;
					var audioDuration = action.audioDuration;
					var animation = action.animation;
					var animationDuration = action.animationDuration;
				} else if(!action.hasOwnProperty("audio") && action.hasOwnProperty("animation") && action.hasOwnProperty("animationDuration")){
					var filename = "animationBehaviour";
					var audio = "";
					var audioDuration = 0;
					var animation = action.animation;
					var animationDuration = action.animationDuration;
				} else if(action.hasOwnProperty("audio") && action.hasOwnProperty("audioDuration") && !action.hasOwnProperty("animation")){
					var filename = "audioBehaviour";
					var audio = action.audio;
					var audioDuration = action.audioDuration;
					var animation = "";
					var animationDuration = 0;
				}				
				
				//calculate the delay before robot response
				if(is.behaviourplanner.behaviourMode === "variant"){
					var delay = roundTo(Math.random()*3, 2);
				} else {
					var delay = 1.5;
				}
				
				//construct the behaviour request object
				var behaviour = new Object();
				behaviour.action = is.zeno.request;
				behaviour.delay = delay;
				behaviour.startTime = 0;
				behaviour.duration = roundTo(audioDuration+animationDuration+delay, 2);
				behaviour.template = filename;
				behaviour.placeholders = [{"animate1":animation},{"animate1_delay":audioDuration+delay},{"speak1":audio},{"speak1_delay":delay}];
				return behaviour;
			}
			
			function createZenoBehaviour(duration, anim, animDelay, audio, audioDelay){
				if(anim !== "" && audio !== ""){
					var filename = "animationAudioBehaviour";
				} else if(anim !== "" && audio === ""){
					var filename = "animationBehaviour";
				} else if(anim === "" && audio !== ""){
					var filename = "audioBehaviour";
				}
				
				if(is.behaviourplanner.behaviourMode === "variant"){
					var delay = roundTo(Math.random()*3, 2);
				} else {
					var delay = 1.5;
				}
				
				var behaviour = new Object();
				behaviour.action = is.zeno.request;
				behaviour.delay = delay;
				behaviour.startTime = 0;
				behaviour.duration = roundTo(duration+delay, 2);
				behaviour.template = filename;
				behaviour.placeholders = [{"animate1":anim},{"animate1_delay":animDelay+delay},{"speak1":audio},{"speak1_delay":audioDelay+delay}];
				return behaviour;
			}
			
			function createZenoLogLine(behaviour){
				return "Doing Zeno action: ["+behaviour.action+"] using BML template: ["+behaviour.template+"] with a delay of ["+behaviour.delay+"] and a total duration of: ["+behaviour.duration+"] seconds. Audio: ["+behaviour.placeholders[2].speak1+"]. Animation:["+behaviour.placeholders[0].animate1+"]";
			}
			
			
		]]>
    </javascript>
    
    <!-- Start and stop the mirroring actions -->
    <template id="startMirroring" name="startMirroring">
    	<preconditions mode="and">
			<condition>is.zeno.request === "startMirroring"</condition>
    	</preconditions>
	    <initeffects>
			<method name="init">
			  <object persistent="is.zeno.persistent.mirroringExe" class="mirroring.MirroringExeWrapper">  
			    <constructors>
			    </constructors>       
			  </object>  
			  <arguments></arguments>
			</method>
      	</initeffects>
    	<effects>
    		<assign is="is.zeno.request">""</assign>
    		<assign is="is.zeno.mirroring">true</assign>
    		
    		<method name="launchMirroringExe">
				<object class="mirroring.MirroringExeWrapper" persistent="is.zeno.persistent.mirroringExe"/>
				<arguments />
			</method>
    	</effects>
    </template>
    
    <template id="stopMirroring" name="stopMirroring">
    	<preconditions mode="and">
			<condition>is.zeno.request === "stopMirroring"</condition>
    	</preconditions>
    	<effects>
    		<assign is="is.zeno.request">""</assign>
    		<assign is="is.zeno.mirroring">false</assign>
    		
    		<method name="killMirroringExe">
				<object class="mirroring.MirroringExeWrapper" persistent="is.zeno.persistent.mirroringExe"/>
				<arguments />
			</method>
    	</effects>
    </template>
      
    <!-- this checks if there are any queued behaviours for Zeno -->
    <template id="doNextBehaviourInQueue" name="doNextBehaviourInQueue">
    	<preconditions mode="and">
    		<condition>!is.zeno.busy</condition>
    		<condition>is.zeno.request === ""</condition>
    		<condition>isPendingZenoBehaviour()</condition>
    	</preconditions>
    	<effects>
    		<assign is="is.zeno.request">getNextZenoBehaviourRequest()</assign>
    	</effects>
    </template>
      
    <!-- Must always be near the top of the file, so we can ignore stuff while zeno is already busy -->
    <template id="ignoreWhileBusy" name="ignoreWhileBusy">
    	<preconditions mode="and">
    		<condition>is.zeno.busy</condition>
    		<condition>is.zeno.request !== ""</condition>
    	</preconditions>
    	<effects>
    		<assign is="is.zeno.request">""</assign>
    	</effects>
    </template>
    
    <template id="storeRequest" name="storeRequest">
    	<preconditions mode="and">
    		<condition>is.zeno.request !== ""</condition>
    		<condition>is.zeno.request !== "repeatLast"</condition>
    	</preconditions>
    	<effects>
    		<assign is="is.zeno.prevRequest">is.zeno.request</assign>
    	</effects>
    </template>
    
    <!-- REPEAT - special action request, basically just repeats the previous request -->
    <template id="repeatLast" name="repeatLast">
		<preconditions mode="and">
			<condition>is.zeno.request === "repeatLast"</condition>
		</preconditions>
		<effects>
			<assign is="is.zeno.request">is.zeno.prevRequest</assign>
		</effects>
	</template>
	
    <!-- GENERIC -->
	<template id="reset" name="reset">
		<preconditions mode="and">
			<condition>is.zeno.request === "reset"</condition>
		</preconditions>
		<effects>
			<assign is="is.zeno.behaviour">createZenoBehaviour(1, "Emotion_neutral", 0, "", 0)</assign>
		</effects>
	</template>
	
	<!-- Always near the end, if action request has not yet been executed and cleaned up, 
	we try to do the generic approach and just execute a random version of the requested action -->
    <template id="genericActionRequest_RandomVariant" name="genericActionRequest_RandomVariant">
    	<preconditions mode="and">
    		<condition>is.zeno.request !== ""</condition>
    		<condition>is.zeno.requestNewRandomVariant</condition>
    		<condition>doesActionExist(is.zeno.request)</condition>
    	</preconditions>
		<effects>
			<assign is="is.av">getRandomVariant(is.av, is.zeno.request)</assign>
			<assign is="is.zeno.behaviour">createZB(getActionVariant(is.zeno.request))</assign>
		</effects>
    </template>
    
    <template id="genericActionRequest" name="genericActionRequest">
    	<preconditions mode="and">
    		<condition>is.zeno.request !== ""</condition>
    		<condition>!is.zeno.requestNewRandomVariant</condition>
    		<condition>doesActionExist(is.zeno.request)</condition>
    	</preconditions>
		<effects>
			<assign is="is.zeno.behaviour">createZB(getActionVariant(is.zeno.request))</assign>
		</effects>
    </template>
    
	<!-- Following templates are responsible for starting behaviours, and then going back to idle when duration finishes -->
	<template id="startBehaviour" name="startBehaviour">
		<preconditions mode="and">
			<condition>is.zeno.behaviour !== ""</condition>
			<condition>is.zeno.behaviour.startTime === 0</condition>
		</preconditions>
		<effects>
			<assign is="is.logger.latestLogLine">logInfo(createZenoLogLine(is.zeno.behaviour))</assign>
			<assign is="is.zeno.busy">true</assign>is.adult.menuRefresh
			<assign is="is.zeno.behaviour.startTime">is.behaviourplanner.time</assign>
			<assign is="is.zeno.bmlId">addBehaviourRequest(is.zeno.behaviour)</assign>
			<assign is="is.adult.menuRefresh">true</assign>
		</effects>
	</template>
	<template id="backToIdle" name="backToIdle">
		<preconditions mode="and">
			<condition>is.zeno.behaviour !== ""</condition>
			<condition><![CDATA[is.behaviourplanner.time > is.zeno.behaviour.startTime + is.zeno.behaviour.duration*1000]]></condition>
		</preconditions>
		<effects>
			<assign is="is.zeno.busy">false</assign>
			<assign is="is.zeno.behaviour">""</assign>
			<assign is="is.adult.menuRefresh">true</assign>
		</effects>
	</template>
    
	<!-- Always at the end, to remove the current request -->
    <template id="cleanupRequest" name="cleanupRequest">
    	<preconditions mode="and">
    		<condition>is.zeno.request !== ""</condition>
    	</preconditions>
    	<effects>
    		<assign is="is.zeno.request">""</assign>
    		<assign is="is.zeno.requestNewRandomVariant">true</assign>
    	</effects>
    </template>
</behaviourtemplates>