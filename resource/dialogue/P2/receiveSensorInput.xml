<behaviourtemplates>

	<is name="rawSensorData">
		{	
			"initialised" : false,
			"acoustic" : {
				"rawInput" : {
					"acoustic" : {
						"name" : "",
						"timestamp" : "",
						"value" : "",
						"confidence" : ""
					}
				}
			},
			"face" : {
				"rawInput" : {
					"face" : {
						"timestamp" : "",
						"timestamp_frac" : "",
						"valid_face" : "",
						"is_redetected" : "",
						"roll" : "",
						"pitch" : "",
						"yaw" : "",
						"landmarks" : "",
						"landmarks_eyes" : "",
						"frame_number": ""
					}
				}
			},
			"body" : {
				"rawInput" : {
					"body" : {
						"timestamp" : "",
						"id" : "",
						"depth" : "",
						"withinAOI" : "",
						"upperBodyPhysicalActivity" : "",
						"wholePhysicalActivity" : "",
						"velocity": "",
						"orientation": "",
						"pose" : "",
						"valence" : "",
						"arousal" : ""
					}
				}
			},
			"reasoning" : {
				"rawInput" : {
					"something_reasoned" : ""
				}
			}
		}
	</is>
	
	<javascript>
		<![CDATA[
		
		//only retrieve the interesting tidbits of information and pass them on to the processor
		
		//pass only the laughing events
		function parseAcousticSensordata(data){
			if(data.hasOwnProperty("acoustic") && data.acoustic.hasOwnProperty("name") && data.acoustic.name === "laughter"
				&& data.acoustic.hasOwnProperty("confidence") && data.acoustic.hasOwnProperty("value")){
				data.acoustic.processed = false;
				return data.acoustic;
			}
			return "none";
		}
		
		//nothing yet
		function parseFaceSensordata(data){
			//we don't use this yet
			return "none";
		}
		
		//pass only the standing pose
		function parseBodySensordata(data){
			if(data.hasOwnProperty("body") && data.body.hasOwnProperty("pose") && data.body.pose === 1){
				ev = new Object();
				ev.pose = 1;
				ev.processed = false;
				return ev;
			}
			return "none";
		}
		
		//pass on when child is stressed
		function parseReasoningSensordata(data){
			if(data.hasOwnProperty("something_reasoned") && data.something_reasoned === "stressed"){
				ev = new Object();
				ev.event = "stressEvent";
				ev.processed = false;
				return ev;
			}
			return "none";
		}
		
		]]>
    </javascript>
      
      <template id="initSensorListeners" name="initSensorListeners">
      	<preconditions>
      		<condition>is.rawSensorData.initialised === false</condition>
      	</preconditions>
      	<effects>
      	<method name="isConnected">
				<object persistent="sensor.acoustic" class="flipper.FlipperMiddleware">
					<constructors>
						<value class="String" constant="SensorAcoustic.properties" />
					</constructors>
				</object>
				<arguments></arguments>
			</method>
			
      	<method name="isConnected">
				<object persistent="sensor.face" class="flipper.FlipperMiddleware">
					<constructors>
						<value class="String" constant="SensorFace.properties" />
					</constructors>
				</object>
				<arguments></arguments>
			</method>
      	<method name="isConnected">
				<object persistent="sensor.body" class="flipper.FlipperMiddleware">
					<constructors>
						<value class="String" constant="SensorBody.properties" />
					</constructors>
				</object>
				<arguments></arguments>
			</method>
      	<method name="isConnected">
				<object persistent="sensor.reasoning" class="flipper.FlipperMiddleware">
					<constructors>
						<value class="String" constant="SensorReasoning.properties" />
					</constructors>
				</object>
				<arguments></arguments>
			</method>
      		<assign is="is.rawSensorData.initialised">true</assign>
      	</effects>
      </template>
      
	<template id="ReceiveAcousticData" name="ReceiveAcousticData">
		<preconditions mode="and">
      		<condition>is.rawSensorData.initialised === true</condition>
			<method name="hasMessage">
				<object persistent="sensor.acoustic" class="flipper.FlipperMiddleware"></object>
				<arguments></arguments>
			</method>
		</preconditions>
		<effects>
			<method is="is.rawSensorData.acoustic.rawInput" is_type="JSONString" name="getMessage">
				<object persistent="sensor.acoustic" class="flipper.FlipperMiddleware"></object>
				<arguments></arguments>
			</method>
			<assign is="is.sensorInputProcessor.acousticEvent">parseAcousticSensordata(is.rawSensorData.acoustic.rawInput)</assign>
		</effects>
		
	</template>
	
      
	<template id="ReceiveFaceData" name="ReceiveFaceData">
		<preconditions mode="and">
      		<condition>is.rawSensorData.initialised === true</condition>
			<method name="hasMessage">
				<object persistent="sensor.face" class="flipper.FlipperMiddleware"></object>
				<arguments></arguments>
			</method>
		</preconditions>
		<effects>
			<method is="is.rawSensorData.face.rawInput" is_type="JSONString" name="getMessage">
				<object persistent="sensor.face" class="flipper.FlipperMiddleware"></object>
				<arguments></arguments>
			</method>
			<assign is="is.sensorInputProcessor.faceEvent">parseFaceSensordata(is.rawSensorData.face.rawInput)</assign>
		</effects>
		
	</template>
	
      
	<template id="ReceiveBodyData" name="ReceiveBodyData">
		<preconditions mode="and">
      		<condition>is.rawSensorData.initialised === true</condition>
			<method name="hasMessage">
				<object persistent="sensor.body" class="flipper.FlipperMiddleware"></object>
				<arguments></arguments>
			</method>
		</preconditions>
		<effects>
			<method is="is.rawSensorData.body.rawInput" is_type="JSONString" name="getMessage">
				<object persistent="sensor.body" class="flipper.FlipperMiddleware"></object>
				<arguments></arguments>
			</method>
			<assign is="is.sensorInputProcessor.bodyEvent">parseBodySensordata(is.rawSensorData.body.rawInput)</assign>
		</effects>
		
	</template>
	
      
	<template id="ReceiveReasoningData" name="ReceiveReasoningData">
		<preconditions mode="and">
      		<condition>is.rawSensorData.initialised === true</condition>
			<method name="hasMessage">
				<object persistent="sensor.reasoning" class="flipper.FlipperMiddleware"></object>
				<arguments></arguments>
			</method>
		</preconditions>
		<effects>
			<method is="is.rawSensorData.reasoning.rawInput" is_type="JSONString" name="getMessage">
				<object persistent="sensor.reasoning" class="flipper.FlipperMiddleware"></object>
				<arguments></arguments>
			</method>
			<assign is="is.sensorInputProcessor.reasoningEvent">parseReasoningSensordata(is.rawSensorData.reasoning.rawInput)</assign>
		</effects>
		
	</template>


</behaviourtemplates>